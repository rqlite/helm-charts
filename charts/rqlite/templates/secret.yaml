{{- $name := tpl (include "rqlite.fullname" .) $ -}}
{{- include "rqlite.generateSecrets" . }}
{{- $config := .Values.config }}
{{/*
List of additional generated system users which will be concatenated with the
user-suppplied list below
*/}}
{{- $internalUsers := list
     (dict "username" "_system_probes" "perms" (list "ready")
      "password" (.Release.rqlite.probePassword))
     (dict "username" "_system_rqlite" "perms" (list "all")
      "password" (.Release.rqlite.rqlitePassword))
}}
{{/* Construct the "sub" key for backup.json and restore.json */}}
{{- $backupStorage := dict
      "access_key_id" (dig "backup" "storage" "accessKeyId" nil $config)
      "secret_access_key" (dig "backup" "storage" "secretAccessKey" nil $config)
      "endpoint" (dig "backup" "storage" "endpoint" nil $config)
      "region" (dig "backup" "storage" "region" nil $config)
      "bucket" (dig "backup" "storage" "bucket" nil $config)
      "path" (dig "backup" "storage" "path" nil $config)
      "force_path_style" (dig "backup" "storage" "forcePathStyle" false $config)
}}
{{- if and $backupStorage.endpoint (not (contains "://" $backupStorage.endpoint)) }}
  {{/*
  As part of the upgrade to AWS SDK v2 in rqlite v8.29.3, the endpoint now must be
  specified as a URI rather than a straight FQDN. This is a breaking change, but rather
  than bumping the major version of the chart to reflect the incompatibility, we just
  prepend "https://" to the endpoint if it doesn't already contain a scheme.
  */}}
  {{- $_ := set $backupStorage "endpoint" (printf "https://%s" $backupStorage.endpoint) }}
{{- end }}
{{- $backup := dict }}
{{- $restore := dict }}
{{- if dig "backup" "autoBackup" "enabled" false $config }}
  {{- $backup = dict
        "version" 1
        "type" (dig "backup" "storage" "type" "s3" $config)
        "interval" (dig "backup" "autoBackup" "interval" nil $config)
        "vacuum" (dig "backup" "autoBackup" "vacuum" false $config)
        "no_compress" (dig "backup" "autoBackup" "noCompress" false $config)
        "timestamp" (dig "backup" "autoBackup" "timestamp" false $config)
        "sub" $backupStorage
  }}
{{- end }}
{{- if dig "backup" "autoRestore" "enabled" false $config }}
  {{- $restore = dict
        "version" 1
        "type" (dig "backup" "storage" "type" "s3" $config)
        "timeout" (dig "backup" "autoRestore" "timeout" "60s" $config)
        "continue_on_failure" (dig "backup" "autoRestore" "continueOnFailure" false $config)
        "sub" $backupStorage
  }}
{{- end }}
{{/* Construct the CDC config */}}
{{- $cdc := dict }}
{{- if dig "cdc" "enabled" false $config }}
  {{- $cdcTLS := dict }}
  {{- with dig "cdc" "tls" dict $config }}
    {{- if or .caCertFile .certFile .keyFile .insecureSkipVerify .serverName }}
      {{- $cdcTLS = dict
            "ca_cert_file" (default "" .caCertFile)
            "cert_file" (default "" .certFile)
            "key_file" (default "" .keyFile)
            "insecure_skip_verify" (default false .insecureSkipVerify)
            "server_name" (default "" .serverName)
      }}
    {{- end }}
  {{- end }}
  {{- $cdc = dict
        "endpoint" (dig "cdc" "endpoint" "" $config)
        "service_id" (dig "cdc" "serviceId" "" $config)
        "row_ids_only" (dig "cdc" "rowIdsOnly" false $config)
        "max_batch_size" (dig "cdc" "maxBatchSize" 10 $config)
        "max_batch_delay" (dig "cdc" "maxBatchDelay" "200ms" $config)
        "high_watermark_interval" (dig "cdc" "highWatermarkInterval" "1s" $config)
        "transmit_timeout" (dig "cdc" "transmitTimeout" "5s" $config)
        "transmit_retry_policy" (dig "cdc" "transmitRetryPolicy" "linear" $config)
        "transmit_min_backoff" (dig "cdc" "transmitMinBackoff" "1s" $config)
        "transmit_max_backoff" (dig "cdc" "transmitMaxBackoff" "30s" $config)
  }}
  {{- if dig "cdc" "tableFilter" "" $config }}
    {{- $_ := set $cdc "table_filter" (dict "pattern" (dig "cdc" "tableFilter" "" $config)) }}
  {{- end }}
  {{- if dig "cdc" "transmitMaxRetries" nil $config }}
    {{- $_ := set $cdc "transmit_max_retries" (dig "cdc" "transmitMaxRetries" nil $config) }}
  {{- end }}
  {{- if not (empty $cdcTLS) }}
    {{- $_ := set $cdc "tls" $cdcTLS }}
  {{- end }}
  {{- if not (dig "cdc" "endpoint" "" $config) }}
    {{- fail "config.cdc.endpoint must be set when config.cdc.enabled is true" }}
  {{- end }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
  labels:
    {{- include "rqlite.labels" . | nindent 4 }}
type: Opaque
stringData:
  users.json: |-
    {{- if $config.users }}
    {{- $users := concat $internalUsers $config.users }}
    {{- tpl ($users | toPrettyJson) . | nindent 4}}
    {{- end }}

  {{- with $backup }}
  backup.json: |-
    {{- tpl (. | toPrettyJson) $ | nindent 4}}
  {{- end }}

  {{- with $restore }}
  restore.json: |-
    {{- tpl (. | toPrettyJson) $ | nindent 4}}
  {{- end }}

  {{- with $cdc }}
  cdc.json: |-
    {{- tpl (. | toPrettyJson) $ | nindent 4}}
  {{- end }}

{{- include "rqlite.renderTLSFiles" (dict "value" "node" "ctx" $) | nindent 2 }}
{{- include "rqlite.renderTLSFiles" (dict "value" "client" "ctx" $) | nindent 2 }}
---
# Persist the generated passwords in the K8s cluster to ensure consistency if the chart is
# upgraded.
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}-internal
  labels:
    {{- include "rqlite.labels" . | nindent 4 }}
type: Opaque
data:
  probePassword: {{ .Release.rqlite.probePassword | b64enc | quote }}
  rqlitePassword: {{ .Release.rqlite.rqlitePassword | b64enc | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}-extra
  labels:
    {{- include "rqlite.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{- with .Values.extraFiles }}
    {{- tpl (toYaml .) $ | nindent 2 }}
  {{- end }}
